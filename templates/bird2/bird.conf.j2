################################################
#               Variable header
################################################
efine OWNAS =  {{ ASN }};
define OWNIPv4 =  {{ dn42_ipv4.split("/")[0] }};
define OWNIPv6 = {{ dn42_ipv6.split("/")[0] }};

define OWNNETSET =[
{% for net in dn42_ipv4_nets %}
    {{ net }}{% if dn42_ipv4_nets|length > 1 and not loop.last  %},{% endif %}{{''}}
{% endfor %}
];{{''}}

define OWNNETSETv6 = [
{% for net in dn42_ipv6_nets %}
    {{ net }}{% if dn42_ipv6_nets|length > 1 and not loop.last  %},{% endif %}{{''}}
{% endfor %}
];{{''}}

################################################
#     bird configuration options
################################################
router id OWNIPv4;

protocol device {
    scan time 10;
}

################################################
#     Utility functions
################################################
function is_self_net_v4() {
  return net ~ OWNNETSET;
}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network_v4() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

function is_valid_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

################################################
#     Filter
################################################
filter ownnets_only {
    if is_self_net_v4() then accept;
    if is_self_net_v6() then accept;
    reject;
};

filter iBGP_import_filter {
    if source != RTS_BGP then accept;
    if bgp_path.len > 64 then accept;
    if is_self_net_v4() then accept;
    if is_self_net_v6() then accept;
    reject;
};

filter iBGP_export_filter {
    if source != RTS_BGP then accept;
    if bgp_path.len > 64 then accept;
    if is_self_net_v4() then accept;
    if is_self_net_v6() then accept;
    reject;
}

################################################
#     ROA IMPORT
################################################
roa4 table dn42_roa_v4;
roa6 table dn42_roa_v6;

# Download URL: https://dn42.burble.com/roa/dn42_roa_bird2_4.conf
protocol static {
    roa4 { table dn42_roa_v4; };
    include "/var/lib/bird/dn42_roa_bird2_4.conf";
};

# Download URL: https://dn42.burble.com/roa/dn42_roa_bird2_6.conf
protocol static {
    roa6 { table dn42_roa_v6; };
    include "/var/lib/bird/dn42_roa_bird2_6.conf  ";
};


################################################
#     KERNEL TABLEs
################################################
protocol kernel {
    scan time 20;

    ipv4 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv4;
            accept;
        };
    };
}

protocol kernel {
    scan time 20;

    ipv6 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
};


################################################
#     OWN NETWORKS
################################################
protocol static {
    ipv4;
{% for net in dn42_ipv4_nets %}
    route {{ net.replace("+"," ") }} reject;{{''}}
{% endfor %}

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    ipv6;
{% for net in dn42_ipv6_nets %}
    route {{ net.replace("+"," ") }} reject;{{''}}
{% endfor %}

    ipv6 {
        import all;
        export none;
    };
}


################################################
#     OSPF
################################################
protocol ospf v3 ospfv4 {
    ipv4 {
            export filter ownnets_only;
            import filter ownnets_only;
        };
    };
    area 0 {
        interface "lo" {
            stub;
        };

        interface "internal" {
            hello 5;
            retransmit 2;
            wait 20;
            dead 60;
        };
    };
}

protocol ospf v3 ospf6 {
    ipv6 {
            export filter ownnets_only;
            import filter ownnets_only;
        };
    };
    area 0 {
        interface "lo" {
            stub;
        };

        interface "internal" {
            hello 5;
            retransmit 2;
            wait 20;
            dead 60;
        };
    };
}


################################################
#     TEMPLATES
################################################
template bgp dnpeers {
    local as OWNAS;
    path metric 1;

    ipv4 {
        import filter {
          if is_valid_network_v4() && !is_self_net_v4() then {
            if (roa_check(dn42_roa_v4, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };

        export filter { if is_valid_network_v4() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };

    ipv6 {
        import filter {
          if is_valid_network_v6() && !is_self_net_v6() then {
            if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };
        export filter { if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
}

template bgp iBGP_Peer {
    local as OWNAS;

    ipv4 {
        next hop self;
        preference 50;

        import filter iBGP_export_filter;
        export filter iBGP_import_filter;
    };
    ipv6 {
        next hop self;
        preference 50;

        import filter iBGP_export_filter;
        export filter iBGP_import_filter;
    };
};

################################################
#     iBGP CONNECTIONS
################################################
{% for key, value in hostvars.iteritems() if key != inventory_hostname %}
protocol bgp ibgp_{{ key.replace("-","").split(".")[0] }} from iBGP_Peer {
  neighbor {{ value.dn42_ipv4.split("/")[0] }} as OWNAS;
}
{% endfor %}


################################################
#     DN42 PEER CONFIGURATION
################################################
include "/etc/bird/peers/*";